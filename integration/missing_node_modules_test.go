package integration_test

import (
	"path/filepath"
	"testing"

	"github.com/cloudfoundry/dagger"

	. "github.com/onsi/gomega"
	"github.com/sclevine/spec"
)

func init() {
	suite("MissingNodeModules", testMissingNodeModules)
}

func testMissingNodeModules(t *testing.T, _ spec.G, it spec.S) {
	var (
		Expect func(interface{}, ...interface{}) Assertion
		app    *dagger.App
		err    error
	)
	it.Before(func() {
		Expect = NewWithT(t).Expect
	})

	it.After(func() {
		if app != nil {
			Expect(app.Destroy()).To(Succeed())
		}
	})

	it("should build a working OCI image for a simple app when there are an empty node_modules", func() {
		app, err = dagger.PackBuild(filepath.Join("testdata", "empty_node_modules"), nodeURI, npmURI)
		Expect(err).ToNot(HaveOccurred())
		Expect(app.Start()).To(Succeed())
		Expect(app.BuildLogs()).To(ContainSubstring("It is recommended to vendor the application's Node.js dependencies"))

		_, _, err = app.HTTPGet("/")
		Expect(err).NotTo(HaveOccurred())
	})

	it("should build a working OCI image for an app that doesn't have a package-lock.json when the node modules are partially vendored", func() {
		app, err = dagger.PackBuild(filepath.Join("testdata", "incomplete_node_modules"), nodeURI, npmURI)
		Expect(err).ToNot(HaveOccurred())

		Expect(app.Start()).To(Succeed())

		_, _, err = app.HTTPGet("/")
		Expect(err).NotTo(HaveOccurred())
	})

	it("warns that unmet dependencies may cause issues when package manager is npm", func() {
		app, err = dagger.PackBuild(filepath.Join("testdata", "unmet_dep"), nodeURI, npmURI)
		Expect(err).ToNot(HaveOccurred())

		Expect(app.Start()).To(Succeed())

		Expect(app.BuildLogs()).To(ContainSubstring("Unmet dependencies don't fail npm install but may cause runtime issues"))
	})
}
