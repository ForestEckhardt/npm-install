// Code generated by MockGen. DO NOT EDIT.
// Source: modules.go

// Package modules_test is a generated GoMock package.
package modules_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPackageManager is a mock of PackageManager interface
type MockPackageManager struct {
	ctrl     *gomock.Controller
	recorder *MockPackageManagerMockRecorder
}

// MockPackageManagerMockRecorder is the mock recorder for MockPackageManager
type MockPackageManagerMockRecorder struct {
	mock *MockPackageManager
}

// NewMockPackageManager creates a new mock instance
func NewMockPackageManager(ctrl *gomock.Controller) *MockPackageManager {
	mock := &MockPackageManager{ctrl: ctrl}
	mock.recorder = &MockPackageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPackageManager) EXPECT() *MockPackageManagerMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockPackageManager) Install(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockPackageManagerMockRecorder) Install(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockPackageManager)(nil).Install), arg0, arg1, arg2)
}

// Rebuild mocks base method
func (m *MockPackageManager) Rebuild(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebuild", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rebuild indicates an expected call of Rebuild
func (mr *MockPackageManagerMockRecorder) Rebuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebuild", reflect.TypeOf((*MockPackageManager)(nil).Rebuild), arg0, arg1)
}

// WarnUnmetDependencies mocks base method
func (m *MockPackageManager) WarnUnmetDependencies(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarnUnmetDependencies", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WarnUnmetDependencies indicates an expected call of WarnUnmetDependencies
func (mr *MockPackageManagerMockRecorder) WarnUnmetDependencies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnUnmetDependencies", reflect.TypeOf((*MockPackageManager)(nil).WarnUnmetDependencies), arg0)
}

// MockMetadataInterface is a mock of MetadataInterface interface
type MockMetadataInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataInterfaceMockRecorder
}

// MockMetadataInterfaceMockRecorder is the mock recorder for MockMetadataInterface
type MockMetadataInterfaceMockRecorder struct {
	mock *MockMetadataInterface
}

// NewMockMetadataInterface creates a new mock instance
func NewMockMetadataInterface(ctrl *gomock.Controller) *MockMetadataInterface {
	mock := &MockMetadataInterface{ctrl: ctrl}
	mock.recorder = &MockMetadataInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataInterface) EXPECT() *MockMetadataInterfaceMockRecorder {
	return m.recorder
}

// Identity mocks base method
func (m *MockMetadataInterface) Identity() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Identity indicates an expected call of Identity
func (mr *MockMetadataInterfaceMockRecorder) Identity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockMetadataInterface)(nil).Identity))
}
