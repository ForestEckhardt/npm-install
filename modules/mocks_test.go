// Code generated by MockGen. DO NOT EDIT.
// Source: contributor.go

// Package modules_test is a generated GoMock package.
package modules_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPackageManager is a mock of PackageManager interface
type MockPackageManager struct {
	ctrl     *gomock.Controller
	recorder *MockPackageManagerMockRecorder
}

// MockPackageManagerMockRecorder is the mock recorder for MockPackageManager
type MockPackageManagerMockRecorder struct {
	mock *MockPackageManager
}

// NewMockPackageManager creates a new mock instance
func NewMockPackageManager(ctrl *gomock.Controller) *MockPackageManager {
	mock := &MockPackageManager{ctrl: ctrl}
	mock.recorder = &MockPackageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPackageManager) EXPECT() *MockPackageManagerMockRecorder {
	return m.recorder
}

// CI mocks base method
func (m *MockPackageManager) CI(cacheLayer, moduleLayer, location string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CI", cacheLayer, moduleLayer, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// CI indicates an expected call of CI
func (mr *MockPackageManagerMockRecorder) CI(cacheLayer, moduleLayer, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CI", reflect.TypeOf((*MockPackageManager)(nil).CI), cacheLayer, moduleLayer, location)
}

// Install mocks base method
func (m *MockPackageManager) Install(cacheLayer, moduleLayer, location string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", cacheLayer, moduleLayer, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockPackageManagerMockRecorder) Install(cacheLayer, moduleLayer, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockPackageManager)(nil).Install), cacheLayer, moduleLayer, location)
}

// Rebuild mocks base method
func (m *MockPackageManager) Rebuild(cacheLayer, location string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebuild", cacheLayer, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rebuild indicates an expected call of Rebuild
func (mr *MockPackageManagerMockRecorder) Rebuild(cacheLayer, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebuild", reflect.TypeOf((*MockPackageManager)(nil).Rebuild), cacheLayer, location)
}

// WarnUnmetDependencies mocks base method
func (m *MockPackageManager) WarnUnmetDependencies(appRoot string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarnUnmetDependencies", appRoot)
	ret0, _ := ret[0].(error)
	return ret0
}

// WarnUnmetDependencies indicates an expected call of WarnUnmetDependencies
func (mr *MockPackageManagerMockRecorder) WarnUnmetDependencies(appRoot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnUnmetDependencies", reflect.TypeOf((*MockPackageManager)(nil).WarnUnmetDependencies), appRoot)
}

// MockMetadataInterface is a mock of MetadataInterface interface
type MockMetadataInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataInterfaceMockRecorder
}

// MockMetadataInterfaceMockRecorder is the mock recorder for MockMetadataInterface
type MockMetadataInterfaceMockRecorder struct {
	mock *MockMetadataInterface
}

// NewMockMetadataInterface creates a new mock instance
func NewMockMetadataInterface(ctrl *gomock.Controller) *MockMetadataInterface {
	mock := &MockMetadataInterface{ctrl: ctrl}
	mock.recorder = &MockMetadataInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetadataInterface) EXPECT() *MockMetadataInterfaceMockRecorder {
	return m.recorder
}

// Identity mocks base method
func (m *MockMetadataInterface) Identity() (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Identity indicates an expected call of Identity
func (mr *MockMetadataInterfaceMockRecorder) Identity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockMetadataInterface)(nil).Identity))
}
